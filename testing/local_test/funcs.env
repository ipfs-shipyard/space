#!/bin/bash -e

if ! ( uname | grep -q Linux )
then
  echo "This script only works on linux."
  exit 6
fi
export script_dir=`dirname "${0}"`
export repo_dir=`git -C "${script_dir}" rev-parse --show-toplevel`
cd "${repo_dir}"

stop() {
  find ${2-*}/ -name "*${1}*" -type f -executable -exec fuser  '{}' \; 2>/dev/null | while read p
  do
    kill ${p}
  done
  if [ $# -eq 1 ]
  then
    killall ${1} 2>/dev/null || true
  fi
}
kill_all() {
  for p in myceli controller hyphae watcher
  do
    stop ${p}
    killall ${p} 2>/dev/null || true # echo "${p} is stopped"
  done
  for f in {gnd,sat.{all,sync,ship},ctl}/*
  do
    fuser "${f}" 2>/dev/null | xargs kill 2>/dev/null || true
  done
}
if [ "${o}" = '' ]
then
  export o=`mktemp -d`
fi
kill_all
./testing/local_test/timeout.killer.sh

check_log() {
  if [ $# -lt 2 ]
  then
    echo 'Specify log directory.'
    exit 2
  fi
  l=${2}
  for i in {0..18}
  do
    if ls ${l}/${3-*}.log >/dev/null
    then
      grep --extended-regexp --max-count=1 --color=always "${1}" ${l}/${3-*}.log && return
    else
      sleep 9
    fi
    sleep $i
  done
  echo `date` ' Failed to find ' "${1}" ' in these logs:'
  ls -lrth --color=always ${l}/${3-*}.log
  echo ' ...elsewhere... '
  grep --extended-regexp --color=always "${1}" */*.log
  kill_all
  fuser "${0}" | xargs kill 2>/dev/null
  exit 1
}

kill_pid() {
  for i in {0..9}
  do
    if [ -d /proc/${1}/ ]
    then
      kill ${1} || true
      sleep ${i}
    else
      return 0
    fi
  done
  echo "Failed to kill ${1}"
  exit 7
}
kill_myceli() {
  export c="$1"
  if grep -q pid= ${c}/myceli.log 2>/dev/null
  then
    kill_pid `grep pid= ${c}/myceli.log | cut -d = -f 2`
  fi
  for i in {0..9}
  do
    for p in `fuser ${c}/myceli`
    do
      echo "Pid ${p} using ${c}/myceli - kill"
      kill "${p}"
      sleep $i
    done
  done
  stop myceli ${c}
}
start() {
  #echo start "${@}"
  [ $# -lt 2 ] && exit 9
  stop ${1} ${2}
  sleep 1
  b=${1}
  shift
  d="${1}"
  shift
  (
    (
      cd "${d}"
      "./${b}" "${@}" > "${b}.log" 2>&1 <&- &
    )  >/dev/null 2>&1 &
  ) >/dev/null 2>&1 &
  echo "Starting (in ${d}) ./${b} ${*} > ${b}.log"
  sleep 1
}
port_open() {
  if nc -u -z -w 9 127.0.0.1 ${1} 2>/dev/null
  then
    return 0
  elif nc  -z -w 9 127.0.0.1 ${1} 2>/dev/null
  then
   #echo "Port ${1} is TCP"
    return 0
  else
    echo "port ${1} not yet open"
    false
  fi
}
port_for() {
  grep listen_address "${1}/config.toml" | sed 's/^.*:\([0-9]*\)".*$/\1/'
}
start_myceli() {
  kill_myceli "${1}"
  while port_open `port_for "${1}"`
  do
    sleep 9
  done
  export c="$1"
  if [ "${RUST_LOG}" != trace ]
  then
    export RUST_LOG=debug
  fi
  sleep 9
  start myceli ${c} config.toml
  until [ -f ${c}/myceli.log ]
  do
    sleep 9
  done
  sleep 9
  until port_open `port_for "${1}"`
  do
    sleep 9
  done
  sleep 9
  check_log 'pid=' ${c} >/dev/null
  sleep 9
}

for d in gnd sat.{all,sync,ship}
do
  rm -r ${d} || true
done
mkdir -p sat.{all,ship,sync} gnd ctl

configure() {
  cat > sat.all/config.toml <<SATCFG
  listen_address = "127.0.0.1:8764"
  radio_address  = "127.0.0.1:8765"
  storage_path = "."
  watched_directory = "watched"
  chatter_ms = ${1}
SATCFG
  cp -v sat.{all,sync}/config.toml
  cp -v sat.{all,ship}/config.toml
#  sed 's/8764/8763/' sat.sync/config.toml
#  sed 's/8764/8762/' sat.ship/config.toml
  cat > gnd/config.toml <<GNDCFG
  radio_address  = "127.0.0.1:8764"
  listen_address = "0.0.0.0:8765"
  storage_path = "."
  watched_directory = "watched"
  chatter_ms = ${1}
GNDCFG
  cat > gnd/hyphae.toml <<HYPHCFG
  myceli_address= "127.0.0.1:8765"
  kubo_address  = "127.0.0.1:5001"
HYPHCFG
}
configure 10000
bld() {
  mkdir -p "${1}"
  cargo build --bin ${2} --features ${3} --no-default-features --profile "${4}"
  bin=`cargo metadata --format-version 1 | jq -r .target_directory`/${4}/${2}
  cp -v "${bin}" "${1}"
}
bld gnd myceli big release
bld gnd watcher big release
bld gnd hyphae big release
bld ctl controller big release
for p in all sync ship
do
  bld sat.${p} myceli small,proto_${p} small
  bld sat.${p} watcher small small
done

controller() {
  port=${1}
  shift
  sleep 1
  date
  if ! timeout 240 ./ctl/controller --listen-mode 127.0.0.1:${port} "${@}" 2> ctl/controller.log > ctl/output.log
  then
    echo -e "\n\t #### \t $(date) \t ### \t Controller command failed: \t ### \t ./ctl/controller --listen-mode 127.0.0.1:${port} ${*} \t ###"
    false
  fi
}
cid_present() {
  if [ -f ${1}/cids/${2} ]
  then
    true
  elif [ -f ${1}/storage.db ]
  then
    for i in {0..9}
    do
      if sqlite3 ${1}/storage.db "select * from blocks where cid = '${2}';" | grep '[a-z]'
      then
        return 0
      fi
      sleep $i
    done
    false
  else
    false
  fi
}
other_side() {
  if grep -q sat <<< "${1}"
  then
    echo -n gnd
  elif [ "${sd}" = '' ]
  then
    echo -n sat.all
  else
    echo -n "${sd}"
  fi
}
transmit() {
  cid_present ${3} ${cid}
  b=`other_side ${3}`
  ! cid_present ${b} ${cid}
  echo "transmit: ./ctl/controller 127.0.0.1:${1} transmit-dag \"${cid}\" 127.0.0.1:${2} 9"
  timeout 9 ./ctl/controller 127.0.0.1:${1} transmit-dag "${cid}" 127.0.0.1:${2} 9 > ctl/controller.log 2>&1
  for i in {0..9}
  do
    if cid_present ${b} ${cid}
    then
      return 0
    else
      sleep ${i}
    fi
  done
  echo "${cid} never showed up on ${b}"
  exit 8
}
g2s() {
  if [ "${cid}" = '' ]
  then
    echo "g2s(${*}) called without cid set!"
    exit 9
  fi
  echo "Transmit ${cid} from ground to satellite..."
  transmit 8765 8764 gnd
}
s2g() {
  if [ "${cid}" = '' ]
  then
    echo "s2g(${*}) called without cid set!"
    exit 9
  fi
  echo "Transmit ${cid} from satellite to ground..."
  transmit 8764 8765 sat.all
}

#stats appdir recv/send packets/bytes
stats() {
  if [ ! -d "${1}" ]
  then
    echo "stats(${*}) ${1} is not an existing appdir"
    exit 77
  elif [ $# -lt 3 ]
  then
    echo "stats($*) not enough args"
    exit 9
  elif [ $# -eq 3 ]
  then
    case "${2}" in
      recv)
        stats "${@}" 'Received.*chunk.of.*bytes'
        ;;
      send)
        stats "${@}" 'Transmitting.chunk.of.*bytes'
        ;;
      *)
        echo "stats(${*}) - ${2} is wrong"
        exit 8
        ;;
    esac
    return
  else
    (
      set -e
      cd "${1}" >/dev/null
      if [ ! -f myceli.log ]
      then
        echo myceli.log missing in `pwd`
        exit 9
      fi
      if [ ! -f ${2}.${3} ] || [ myceli.log -nt ${2}.${3} ]
      then
        case "${3}" in
          packets)
            grep "${4}" myceli.log | wc -l > ${2}.${3}
            ;;
          bytes)
            ( grep "${4}" myceli.log | sed 's/^.*\ \([0-9]*\) bytes.*$/\1 +/' ; echo ' 0' ) | xargs echo | bc > ${2}.${3}
            ;;
          *)
            echo "stats(${*}) - ${3} is wrong"
            exit 7
            ;;
        esac
      fi
      cat ${2}.${3}
    )
  fi
}

echo 'Setup finished'
